/* automatically generated by rust-bindgen 0.65.1 */

pub const _STDINT_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const true_: u32 = 1;
pub const false_: u32 = 0;
pub const __bool_true_false_are_defined: u32 = 1;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[test]
fn bindgen_test_layout_max_align_t() {
    const UNINIT: ::std::mem::MaybeUninit<max_align_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<max_align_t>(),
        32usize,
        concat!("Size of: ", stringify!(max_align_t))
    );
    assert_eq!(
        ::std::mem::align_of::<max_align_t>(),
        16usize,
        concat!("Alignment of ", stringify!(max_align_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce1) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce1)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__clang_max_align_nonce2) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(max_align_t),
            "::",
            stringify!(__clang_max_align_nonce2)
        )
    );
}
pub const CLAY__ELEMENT_DEFINITION_LATCH: ::std::os::raw::c_int = 0;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_String {
    pub length: ::std::os::raw::c_int,
    pub chars: *const ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Clay_String() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_String> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_String>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_String))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_String>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_String))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_String),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).chars) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_String),
            "::",
            stringify!(chars)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay__StringArray {
    pub capacity: u32,
    pub length: u32,
    pub internalArray: *mut Clay_String,
}
#[test]
fn bindgen_test_layout_Clay__StringArray() {
    const UNINIT: ::std::mem::MaybeUninit<Clay__StringArray> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay__StringArray>(),
        16usize,
        concat!("Size of: ", stringify!(Clay__StringArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay__StringArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay__StringArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay__StringArray),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay__StringArray),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay__StringArray),
            "::",
            stringify!(internalArray)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Arena {
    pub label: Clay_String,
    pub nextAllocation: u64,
    pub capacity: u64,
    pub memory: *mut ::std::os::raw::c_char,
}
#[test]
fn bindgen_test_layout_Clay_Arena() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Arena> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Arena>(),
        40usize,
        concat!("Size of: ", stringify!(Clay_Arena))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Arena>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_Arena))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).label) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Arena),
            "::",
            stringify!(label)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).nextAllocation) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Arena),
            "::",
            stringify!(nextAllocation)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Arena),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).memory) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Arena),
            "::",
            stringify!(memory)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Dimensions {
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_Clay_Dimensions() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Dimensions> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Dimensions>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_Dimensions))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Dimensions>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_Dimensions))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Dimensions),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Dimensions),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Vector2 {
    pub x: f32,
    pub y: f32,
}
#[test]
fn bindgen_test_layout_Clay_Vector2() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Vector2> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Vector2>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_Vector2))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Vector2>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_Vector2))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Vector2),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Vector2),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Color {
    pub r: f32,
    pub g: f32,
    pub b: f32,
    pub a: f32,
}
#[test]
fn bindgen_test_layout_Clay_Color() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Color> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Color>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_Color))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Color>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_Color))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).r) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Color),
            "::",
            stringify!(r)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).g) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Color),
            "::",
            stringify!(g)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).b) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Color),
            "::",
            stringify!(b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).a) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Color),
            "::",
            stringify!(a)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BoundingBox {
    pub x: f32,
    pub y: f32,
    pub width: f32,
    pub height: f32,
}
#[test]
fn bindgen_test_layout_Clay_BoundingBox() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_BoundingBox> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_BoundingBox>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_BoundingBox))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_BoundingBox>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_BoundingBox))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BoundingBox),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BoundingBox),
            "::",
            stringify!(y)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BoundingBox),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BoundingBox),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ElementId {
    pub id: u32,
    pub offset: u32,
    pub baseId: u32,
    pub stringId: Clay_String,
}
#[test]
fn bindgen_test_layout_Clay_ElementId() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ElementId> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ElementId>(),
        32usize,
        concat!("Size of: ", stringify!(Clay_ElementId))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ElementId>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_ElementId))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementId),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementId),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).baseId) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementId),
            "::",
            stringify!(baseId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).stringId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementId),
            "::",
            stringify!(stringId)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CornerRadius {
    pub topLeft: f32,
    pub topRight: f32,
    pub bottomLeft: f32,
    pub bottomRight: f32,
}
#[test]
fn bindgen_test_layout_Clay_CornerRadius() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_CornerRadius> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_CornerRadius>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_CornerRadius))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_CornerRadius>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_CornerRadius))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topLeft) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_CornerRadius),
            "::",
            stringify!(topLeft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).topRight) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_CornerRadius),
            "::",
            stringify!(topRight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottomLeft) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_CornerRadius),
            "::",
            stringify!(bottomLeft)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottomRight) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_CornerRadius),
            "::",
            stringify!(bottomRight)
        )
    );
}
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_RECTANGLE: Clay__ElementConfigType = 1;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_BORDER_CONTAINER:
    Clay__ElementConfigType = 2;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_FLOATING_CONTAINER:
    Clay__ElementConfigType = 4;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_SCROLL_CONTAINER:
    Clay__ElementConfigType = 8;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_IMAGE: Clay__ElementConfigType = 16;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_TEXT: Clay__ElementConfigType = 32;
pub const Clay__ElementConfigType_CLAY__ELEMENT_CONFIG_TYPE_CUSTOM: Clay__ElementConfigType = 64;
pub type Clay__ElementConfigType = ::std::os::raw::c_uchar;
pub const Clay_LayoutDirection_CLAY_LEFT_TO_RIGHT: Clay_LayoutDirection = 0;
pub const Clay_LayoutDirection_CLAY_TOP_TO_BOTTOM: Clay_LayoutDirection = 1;
pub type Clay_LayoutDirection = ::std::os::raw::c_uchar;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_LEFT: Clay_LayoutAlignmentX = 0;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_RIGHT: Clay_LayoutAlignmentX = 1;
pub const Clay_LayoutAlignmentX_CLAY_ALIGN_X_CENTER: Clay_LayoutAlignmentX = 2;
pub type Clay_LayoutAlignmentX = ::std::os::raw::c_uchar;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_TOP: Clay_LayoutAlignmentY = 0;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_BOTTOM: Clay_LayoutAlignmentY = 1;
pub const Clay_LayoutAlignmentY_CLAY_ALIGN_Y_CENTER: Clay_LayoutAlignmentY = 2;
pub type Clay_LayoutAlignmentY = ::std::os::raw::c_uchar;
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIT: Clay__SizingType = 0;
pub const Clay__SizingType_CLAY__SIZING_TYPE_GROW: Clay__SizingType = 1;
pub const Clay__SizingType_CLAY__SIZING_TYPE_PERCENT: Clay__SizingType = 2;
pub const Clay__SizingType_CLAY__SIZING_TYPE_FIXED: Clay__SizingType = 3;
pub type Clay__SizingType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ChildAlignment {
    pub x: Clay_LayoutAlignmentX,
    pub y: Clay_LayoutAlignmentY,
}
#[test]
fn bindgen_test_layout_Clay_ChildAlignment() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ChildAlignment> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ChildAlignment>(),
        2usize,
        concat!("Size of: ", stringify!(Clay_ChildAlignment))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ChildAlignment>(),
        1usize,
        concat!("Alignment of ", stringify!(Clay_ChildAlignment))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ChildAlignment),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ChildAlignment),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_SizingMinMax {
    pub min: f32,
    pub max: f32,
}
#[test]
fn bindgen_test_layout_Clay_SizingMinMax() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_SizingMinMax> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_SizingMinMax>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_SizingMinMax))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_SizingMinMax>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_SizingMinMax))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).min) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_SizingMinMax),
            "::",
            stringify!(min)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).max) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_SizingMinMax),
            "::",
            stringify!(max)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_SizingAxis {
    pub __bindgen_anon_1: Clay_SizingAxis__bindgen_ty_1,
    pub type_: Clay__SizingType,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_SizingAxis__bindgen_ty_1 {
    pub sizeMinMax: Clay_SizingMinMax,
    pub sizePercent: f32,
}
#[test]
fn bindgen_test_layout_Clay_SizingAxis__bindgen_ty_1() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_SizingAxis__bindgen_ty_1> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_SizingAxis__bindgen_ty_1>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_SizingAxis__bindgen_ty_1))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_SizingAxis__bindgen_ty_1>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_SizingAxis__bindgen_ty_1))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizeMinMax) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_SizingAxis__bindgen_ty_1),
            "::",
            stringify!(sizeMinMax)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizePercent) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_SizingAxis__bindgen_ty_1),
            "::",
            stringify!(sizePercent)
        )
    );
}
#[test]
fn bindgen_test_layout_Clay_SizingAxis() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_SizingAxis> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_SizingAxis>(),
        12usize,
        concat!("Size of: ", stringify!(Clay_SizingAxis))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_SizingAxis>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_SizingAxis))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_SizingAxis),
            "::",
            stringify!(type_)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_Sizing {
    pub width: Clay_SizingAxis,
    pub height: Clay_SizingAxis,
}
#[test]
fn bindgen_test_layout_Clay_Sizing() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Sizing> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Sizing>(),
        24usize,
        concat!("Size of: ", stringify!(Clay_Sizing))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Sizing>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_Sizing))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Sizing),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).height) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Sizing),
            "::",
            stringify!(height)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Padding {
    pub x: u16,
    pub y: u16,
}
#[test]
fn bindgen_test_layout_Clay_Padding() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Padding> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Padding>(),
        4usize,
        concat!("Size of: ", stringify!(Clay_Padding))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Padding>(),
        2usize,
        concat!("Alignment of ", stringify!(Clay_Padding))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).x) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Padding),
            "::",
            stringify!(x)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).y) as usize - ptr as usize },
        2usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Padding),
            "::",
            stringify!(y)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_LayoutConfig {
    pub sizing: Clay_Sizing,
    pub padding: Clay_Padding,
    pub childGap: u16,
    pub childAlignment: Clay_ChildAlignment,
    pub layoutDirection: Clay_LayoutDirection,
}
#[test]
fn bindgen_test_layout_Clay_LayoutConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_LayoutConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_LayoutConfig>(),
        36usize,
        concat!("Size of: ", stringify!(Clay_LayoutConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_LayoutConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_LayoutConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sizing) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_LayoutConfig),
            "::",
            stringify!(sizing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).padding) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_LayoutConfig),
            "::",
            stringify!(padding)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childGap) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_LayoutConfig),
            "::",
            stringify!(childGap)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).childAlignment) as usize - ptr as usize },
        30usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_LayoutConfig),
            "::",
            stringify!(childAlignment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).layoutDirection) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_LayoutConfig),
            "::",
            stringify!(layoutDirection)
        )
    );
}
extern "C" {
    pub static mut CLAY_LAYOUT_DEFAULT: Clay_LayoutConfig;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RectangleElementConfig {
    pub color: Clay_Color,
    pub cornerRadius: Clay_CornerRadius,
}
#[test]
fn bindgen_test_layout_Clay_RectangleElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_RectangleElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_RectangleElementConfig>(),
        32usize,
        concat!("Size of: ", stringify!(Clay_RectangleElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_RectangleElementConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_RectangleElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RectangleElementConfig),
            "::",
            stringify!(color)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cornerRadius) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RectangleElementConfig),
            "::",
            stringify!(cornerRadius)
        )
    );
}
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_WORDS: Clay_TextElementConfigWrapMode = 0;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NEWLINES: Clay_TextElementConfigWrapMode =
    1;
pub const Clay_TextElementConfigWrapMode_CLAY_TEXT_WRAP_NONE: Clay_TextElementConfigWrapMode = 2;
pub type Clay_TextElementConfigWrapMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_TextElementConfig {
    pub textColor: Clay_Color,
    pub fontId: u16,
    pub fontSize: u16,
    pub letterSpacing: u16,
    pub lineHeight: u16,
    pub wrapMode: Clay_TextElementConfigWrapMode,
}
#[test]
fn bindgen_test_layout_Clay_TextElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_TextElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_TextElementConfig>(),
        28usize,
        concat!("Size of: ", stringify!(Clay_TextElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_TextElementConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_TextElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textColor) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(textColor)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fontId) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(fontId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).fontSize) as usize - ptr as usize },
        18usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(fontSize)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).letterSpacing) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(letterSpacing)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).lineHeight) as usize - ptr as usize },
        22usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(lineHeight)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrapMode) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_TextElementConfig),
            "::",
            stringify!(wrapMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ImageElementConfig {
    pub imageData: *mut ::std::os::raw::c_void,
    pub sourceDimensions: Clay_Dimensions,
}
#[test]
fn bindgen_test_layout_Clay_ImageElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ImageElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ImageElementConfig>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_ImageElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ImageElementConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_ImageElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ImageElementConfig),
            "::",
            stringify!(imageData)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).sourceDimensions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ImageElementConfig),
            "::",
            stringify!(sourceDimensions)
        )
    );
}
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_TOP: Clay_FloatingAttachPointType = 0;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_CENTER: Clay_FloatingAttachPointType =
    1;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_LEFT_BOTTOM: Clay_FloatingAttachPointType =
    2;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_TOP: Clay_FloatingAttachPointType =
    3;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_CENTER:
    Clay_FloatingAttachPointType = 4;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_CENTER_BOTTOM:
    Clay_FloatingAttachPointType = 5;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_TOP: Clay_FloatingAttachPointType =
    6;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_CENTER:
    Clay_FloatingAttachPointType = 7;
pub const Clay_FloatingAttachPointType_CLAY_ATTACH_POINT_RIGHT_BOTTOM:
    Clay_FloatingAttachPointType = 8;
pub type Clay_FloatingAttachPointType = ::std::os::raw::c_uchar;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingAttachPoints {
    pub element: Clay_FloatingAttachPointType,
    pub parent: Clay_FloatingAttachPointType,
}
#[test]
fn bindgen_test_layout_Clay_FloatingAttachPoints() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_FloatingAttachPoints> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_FloatingAttachPoints>(),
        2usize,
        concat!("Size of: ", stringify!(Clay_FloatingAttachPoints))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_FloatingAttachPoints>(),
        1usize,
        concat!("Alignment of ", stringify!(Clay_FloatingAttachPoints))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).element) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingAttachPoints),
            "::",
            stringify!(element)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parent) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingAttachPoints),
            "::",
            stringify!(parent)
        )
    );
}
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_CAPTURE: Clay_PointerCaptureMode = 0;
pub const Clay_PointerCaptureMode_CLAY_POINTER_CAPTURE_MODE_PASSTHROUGH: Clay_PointerCaptureMode =
    1;
pub type Clay_PointerCaptureMode = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_FloatingElementConfig {
    pub offset: Clay_Vector2,
    pub expand: Clay_Dimensions,
    pub zIndex: u16,
    pub parentId: u32,
    pub attachment: Clay_FloatingAttachPoints,
    pub pointerCaptureMode: Clay_PointerCaptureMode,
}
#[test]
fn bindgen_test_layout_Clay_FloatingElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_FloatingElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_FloatingElementConfig>(),
        32usize,
        concat!("Size of: ", stringify!(Clay_FloatingElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_FloatingElementConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_FloatingElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).offset) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(offset)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).expand) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(expand)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).zIndex) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(zIndex)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).parentId) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(parentId)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).attachment) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(attachment)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).pointerCaptureMode) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_FloatingElementConfig),
            "::",
            stringify!(pointerCaptureMode)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_CustomElementConfig {
    pub customData: *mut ::std::os::raw::c_void,
}
#[test]
fn bindgen_test_layout_Clay_CustomElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_CustomElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_CustomElementConfig>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_CustomElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_CustomElementConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_CustomElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customData) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_CustomElementConfig),
            "::",
            stringify!(customData)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollElementConfig {
    pub horizontal: bool,
    pub vertical: bool,
}
#[test]
fn bindgen_test_layout_Clay_ScrollElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ScrollElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ScrollElementConfig>(),
        2usize,
        concat!("Size of: ", stringify!(Clay_ScrollElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ScrollElementConfig>(),
        1usize,
        concat!("Alignment of ", stringify!(Clay_ScrollElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).horizontal) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollElementConfig),
            "::",
            stringify!(horizontal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).vertical) as usize - ptr as usize },
        1usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollElementConfig),
            "::",
            stringify!(vertical)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_Border {
    pub width: u32,
    pub color: Clay_Color,
}
#[test]
fn bindgen_test_layout_Clay_Border() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_Border> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_Border>(),
        20usize,
        concat!("Size of: ", stringify!(Clay_Border))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_Border>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_Border))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).width) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Border),
            "::",
            stringify!(width)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).color) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_Border),
            "::",
            stringify!(color)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_BorderElementConfig {
    pub left: Clay_Border,
    pub right: Clay_Border,
    pub top: Clay_Border,
    pub bottom: Clay_Border,
    pub betweenChildren: Clay_Border,
    pub cornerRadius: Clay_CornerRadius,
}
#[test]
fn bindgen_test_layout_Clay_BorderElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_BorderElementConfig> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_BorderElementConfig>(),
        116usize,
        concat!("Size of: ", stringify!(Clay_BorderElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_BorderElementConfig>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_BorderElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).left) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(left)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).right) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(right)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).top) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(top)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).bottom) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(bottom)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).betweenChildren) as usize - ptr as usize },
        80usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(betweenChildren)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).cornerRadius) as usize - ptr as usize },
        100usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_BorderElementConfig),
            "::",
            stringify!(cornerRadius)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Clay_ElementConfigUnion {
    pub rectangleElementConfig: *mut Clay_RectangleElementConfig,
    pub textElementConfig: *mut Clay_TextElementConfig,
    pub imageElementConfig: *mut Clay_ImageElementConfig,
    pub floatingElementConfig: *mut Clay_FloatingElementConfig,
    pub customElementConfig: *mut Clay_CustomElementConfig,
    pub scrollElementConfig: *mut Clay_ScrollElementConfig,
    pub borderElementConfig: *mut Clay_BorderElementConfig,
}
#[test]
fn bindgen_test_layout_Clay_ElementConfigUnion() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ElementConfigUnion> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ElementConfigUnion>(),
        8usize,
        concat!("Size of: ", stringify!(Clay_ElementConfigUnion))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ElementConfigUnion>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_ElementConfigUnion))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).rectangleElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(rectangleElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).textElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(textElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).imageElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(imageElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).floatingElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(floatingElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).customElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(customElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrollElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(scrollElementConfig)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).borderElementConfig) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfigUnion),
            "::",
            stringify!(borderElementConfig)
        )
    );
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_ElementConfig {
    pub type_: Clay__ElementConfigType,
    pub config: Clay_ElementConfigUnion,
}
#[test]
fn bindgen_test_layout_Clay_ElementConfig() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ElementConfig> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ElementConfig>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_ElementConfig))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ElementConfig>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_ElementConfig))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfig),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ElementConfig),
            "::",
            stringify!(config)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_ScrollContainerData {
    pub scrollPosition: *mut Clay_Vector2,
    pub scrollContainerDimensions: Clay_Dimensions,
    pub contentDimensions: Clay_Dimensions,
    pub config: Clay_ScrollElementConfig,
    pub found: bool,
}
#[test]
fn bindgen_test_layout_Clay_ScrollContainerData() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_ScrollContainerData> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_ScrollContainerData>(),
        32usize,
        concat!("Size of: ", stringify!(Clay_ScrollContainerData))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_ScrollContainerData>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_ScrollContainerData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrollPosition) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollContainerData),
            "::",
            stringify!(scrollPosition)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).scrollContainerDimensions) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollContainerData),
            "::",
            stringify!(scrollContainerDimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).contentDimensions) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollContainerData),
            "::",
            stringify!(contentDimensions)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollContainerData),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).found) as usize - ptr as usize },
        26usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_ScrollContainerData),
            "::",
            stringify!(found)
        )
    );
}
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_NONE: Clay_RenderCommandType = 0;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_RECTANGLE: Clay_RenderCommandType = 1;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_BORDER: Clay_RenderCommandType = 2;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_TEXT: Clay_RenderCommandType = 3;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_IMAGE: Clay_RenderCommandType = 4;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_START: Clay_RenderCommandType = 5;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_SCISSOR_END: Clay_RenderCommandType = 6;
pub const Clay_RenderCommandType_CLAY_RENDER_COMMAND_TYPE_CUSTOM: Clay_RenderCommandType = 7;
pub type Clay_RenderCommandType = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Clay_RenderCommand {
    pub boundingBox: Clay_BoundingBox,
    pub config: Clay_ElementConfigUnion,
    pub text: Clay_String,
    pub id: u32,
    pub commandType: Clay_RenderCommandType,
    pub name: Clay_String,
}
#[test]
fn bindgen_test_layout_Clay_RenderCommand() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_RenderCommand> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_RenderCommand>(),
        64usize,
        concat!("Size of: ", stringify!(Clay_RenderCommand))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_RenderCommand>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_RenderCommand))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).boundingBox) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(boundingBox)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).config) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(config)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).text) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(text)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).id) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(id)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).commandType) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(commandType)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).name) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommand),
            "::",
            stringify!(name)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_RenderCommandArray {
    pub capacity: u32,
    pub length: u32,
    pub internalArray: *mut Clay_RenderCommand,
}
#[test]
fn bindgen_test_layout_Clay_RenderCommandArray() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_RenderCommandArray> =
        ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_RenderCommandArray>(),
        16usize,
        concat!("Size of: ", stringify!(Clay_RenderCommandArray))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_RenderCommandArray>(),
        8usize,
        concat!("Alignment of ", stringify!(Clay_RenderCommandArray))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).capacity) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommandArray),
            "::",
            stringify!(capacity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).length) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommandArray),
            "::",
            stringify!(length)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).internalArray) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_RenderCommandArray),
            "::",
            stringify!(internalArray)
        )
    );
}
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED_THIS_FRAME:
    Clay_PointerDataInteractionState = 0;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_PRESSED:
    Clay_PointerDataInteractionState = 1;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED_THIS_FRAME:
    Clay_PointerDataInteractionState = 2;
pub const Clay_PointerDataInteractionState_CLAY_POINTER_DATA_RELEASED:
    Clay_PointerDataInteractionState = 3;
pub type Clay_PointerDataInteractionState = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Clay_PointerData {
    pub position: Clay_Vector2,
    pub state: Clay_PointerDataInteractionState,
}
#[test]
fn bindgen_test_layout_Clay_PointerData() {
    const UNINIT: ::std::mem::MaybeUninit<Clay_PointerData> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Clay_PointerData>(),
        12usize,
        concat!("Size of: ", stringify!(Clay_PointerData))
    );
    assert_eq!(
        ::std::mem::align_of::<Clay_PointerData>(),
        4usize,
        concat!("Alignment of ", stringify!(Clay_PointerData))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).position) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_PointerData),
            "::",
            stringify!(position)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).state) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Clay_PointerData),
            "::",
            stringify!(state)
        )
    );
}
extern "C" {
    pub fn Clay_MinMemorySize() -> u32;
}
extern "C" {
    pub fn Clay_CreateArenaWithCapacityAndMemory(
        capacity: u32,
        offset: *mut ::std::os::raw::c_void,
    ) -> Clay_Arena;
}
extern "C" {
    pub fn Clay_SetPointerState(position: Clay_Vector2, pointerDown: bool);
}
extern "C" {
    pub fn Clay_Initialize(arena: Clay_Arena, layoutDimensions: Clay_Dimensions);
}
extern "C" {
    pub fn Clay_UpdateScrollContainers(
        enableDragScrolling: bool,
        scrollDelta: Clay_Vector2,
        deltaTime: f32,
    );
}
extern "C" {
    pub fn Clay_SetLayoutDimensions(dimensions: Clay_Dimensions);
}
extern "C" {
    pub fn Clay_BeginLayout();
}
extern "C" {
    pub fn Clay_EndLayout() -> Clay_RenderCommandArray;
}
extern "C" {
    pub fn Clay_GetElementId(idString: Clay_String) -> Clay_ElementId;
}
extern "C" {
    pub fn Clay_GetElementIdWithIndex(idString: Clay_String, index: u32) -> Clay_ElementId;
}
extern "C" {
    pub fn Clay_Hovered() -> bool;
}
extern "C" {
    pub fn Clay_OnHover(
        onHoverFunction: ::std::option::Option<
            unsafe extern "C" fn(
                elementId: Clay_ElementId,
                pointerData: Clay_PointerData,
                userData: isize,
            ),
        >,
        userData: isize,
    );
}
extern "C" {
    pub fn Clay_GetScrollContainerData(id: Clay_ElementId) -> Clay_ScrollContainerData;
}
extern "C" {
    pub fn Clay_SetMeasureTextFunction(
        measureTextFunction: ::std::option::Option<
            unsafe extern "C" fn(
                text: *mut Clay_String,
                config: *mut Clay_TextElementConfig,
            ) -> Clay_Dimensions,
        >,
    );
}
extern "C" {
    pub fn Clay_SetQueryScrollOffsetFunction(
        queryScrollOffsetFunction: ::std::option::Option<
            unsafe extern "C" fn(elementId: u32) -> Clay_Vector2,
        >,
    );
}
extern "C" {
    pub fn Clay_RenderCommandArray_Get(
        array: *mut Clay_RenderCommandArray,
        index: i32,
    ) -> *mut Clay_RenderCommand;
}
extern "C" {
    pub fn Clay_SetDebugModeEnabled(enabled: bool);
}
extern "C" {
    pub fn Clay_SetCullingEnabled(enabled: bool);
}
extern "C" {
    pub fn Clay__OpenElement();
}
extern "C" {
    pub fn Clay__CloseElement();
}
extern "C" {
    pub fn Clay__StoreLayoutConfig(config: Clay_LayoutConfig) -> *mut Clay_LayoutConfig;
}
extern "C" {
    pub fn Clay__ElementPostConfiguration();
}
extern "C" {
    pub fn Clay__AttachId(id: Clay_ElementId);
}
extern "C" {
    pub fn Clay__AttachLayoutConfig(config: *mut Clay_LayoutConfig);
}
extern "C" {
    pub fn Clay__AttachElementConfig(
        config: Clay_ElementConfigUnion,
        type_: Clay__ElementConfigType,
    );
}
extern "C" {
    pub fn Clay__StoreRectangleElementConfig(
        config: Clay_RectangleElementConfig,
    ) -> *mut Clay_RectangleElementConfig;
}
extern "C" {
    pub fn Clay__StoreTextElementConfig(
        config: Clay_TextElementConfig,
    ) -> *mut Clay_TextElementConfig;
}
extern "C" {
    pub fn Clay__StoreImageElementConfig(
        config: Clay_ImageElementConfig,
    ) -> *mut Clay_ImageElementConfig;
}
extern "C" {
    pub fn Clay__StoreFloatingElementConfig(
        config: Clay_FloatingElementConfig,
    ) -> *mut Clay_FloatingElementConfig;
}
extern "C" {
    pub fn Clay__StoreCustomElementConfig(
        config: Clay_CustomElementConfig,
    ) -> *mut Clay_CustomElementConfig;
}
extern "C" {
    pub fn Clay__StoreScrollElementConfig(
        config: Clay_ScrollElementConfig,
    ) -> *mut Clay_ScrollElementConfig;
}
extern "C" {
    pub fn Clay__StoreBorderElementConfig(
        config: Clay_BorderElementConfig,
    ) -> *mut Clay_BorderElementConfig;
}
extern "C" {
    pub fn Clay__HashString(key: Clay_String, offset: u32, seed: u32) -> Clay_ElementId;
}
extern "C" {
    pub fn Clay__Noop();
}
extern "C" {
    pub fn Clay__OpenTextElement(text: Clay_String, textConfig: *mut Clay_TextElementConfig);
}
extern "C" {
    pub static mut Clay__debugViewHighlightColor: Clay_Color;
}
extern "C" {
    pub static mut Clay__debugViewWidth: u32;
}
extern "C" {
    pub static mut Clay__debugMaxElementsLatch: bool;
}
